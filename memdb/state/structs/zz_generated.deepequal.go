//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by deepequal-gen. DO NOT EDIT.

package structs

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *DatapathEndpoint) DeepEqual(other *DatapathEndpoint) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if in.EndpointID != other.EndpointID {
		return false
	}
	if in.State != other.State {
		return false
	}
	if in.IfName != other.IfName {
		return false
	}
	if in.IfIndex != other.IfIndex {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Endpoint) DeepEqual(other *Endpoint) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if in.Namespace != other.Namespace {
		return false
	}
	if in.Name != other.Name {
		return false
	}
	if in.Revision != other.Revision {
		return false
	}
	if in.CreatedAt != other.CreatedAt {
		return false
	}
	if in.ContainerID != other.ContainerID {
		return false
	}
	if !in.IPv4.DeepEqual(&other.IPv4) {
		return false
	}

	if !in.IPv6.DeepEqual(&other.IPv6) {
		return false
	}

	if in.LabelKey != other.LabelKey {
		return false
	}
	if !in.Labels.DeepEqual(&other.Labels) {
		return false
	}

	if in.State != other.State {
		return false
	}
	if in.SelectorPolicyID != other.SelectorPolicyID {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ExtMeta) DeepEqual(other *ExtMeta) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if in.Name != other.Name {
		return false
	}
	if in.Namespace != other.Namespace {
		return false
	}
	if in.Revision != other.Revision {
		return false
	}
	if ((in.Labels != nil) && (other.Labels != nil)) || ((in.Labels == nil) != (other.Labels == nil)) {
		in, other := &in.Labels, &other.Labels
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if inValue != otherValue {
						return false
					}
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ExtNetworkPolicy) DeepEqual(other *ExtNetworkPolicy) bool {
	if other == nil {
		return false
	}

	if !in.ExtMeta.DeepEqual(&other.ExtMeta) {
		return false
	}

	if !in.Status.DeepEqual(&other.Status) {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ExtNetworkPolicyNodeStatus) DeepEqual(other *ExtNetworkPolicyNodeStatus) bool {
	if other == nil {
		return false
	}

	if in.OK != other.OK {
		return false
	}
	if in.Error != other.Error {
		return false
	}
	if in.Revision != other.Revision {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ExtNetworkPolicyStatus) DeepEqual(other *ExtNetworkPolicyStatus) bool {
	if other == nil {
		return false
	}

	if ((in.Nodes != nil) && (other.Nodes != nil)) || ((in.Nodes == nil) != (other.Nodes == nil)) {
		in, other := &in.Nodes, &other.Nodes
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if !inValue.DeepEqual(&otherValue) {
						return false
					}
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ExtPolicyRule) DeepEqual(other *ExtPolicyRule) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if !in.ExtMeta.DeepEqual(&other.ExtMeta) {
		return false
	}

	if (in.Rule == nil) != (other.Rule == nil) {
		return false
	} else if in.Rule != nil {
		if !in.Rule.DeepEqual(other.Rule) {
			return false
		}
	}

	if in.Gone != other.Gone {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *IPToIdentity) DeepEqual(other *IPToIdentity) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if !in.IP.DeepEqual(&other.IP) {
		return false
	}

	if in.LabelKey != other.LabelKey {
		return false
	}
	if in.Key != other.Key {
		return false
	}
	if in.Source != other.Source {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *L4Policy) DeepEqual(other *L4Policy) bool {
	if other == nil {
		return false
	}

	if ((in.SourceRules != nil) && (other.SourceRules != nil)) || ((in.SourceRules == nil) != (other.SourceRules == nil)) {
		in, other := &in.SourceRules, &other.SourceRules
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Node) DeepEqual(other *Node) bool {
	if other == nil {
		return false
	}

	if !in.ExtMeta.DeepEqual(&other.ExtMeta) {
		return false
	}

	if in.Identity != other.Identity {
		return false
	}
	if !in.Address.DeepEqual(&other.Address) {
		return false
	}

	if in.Status != other.Status {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *SelectorPolicy) DeepEqual(other *SelectorPolicy) bool {
	if other == nil {
		return false
	}

	if in.ID != other.ID {
		return false
	}
	if in.NumericIdentity != other.NumericIdentity {
		return false
	}
	if in.LabelKey != other.LabelKey {
		return false
	}
	if in.Revision != other.Revision {
		return false
	}
	if !in.L4Policy.DeepEqual(&other.L4Policy) {
		return false
	}

	if ((in.Labels != nil) && (other.Labels != nil)) || ((in.Labels == nil) != (other.Labels == nil)) {
		in, other := &in.Labels, &other.Labels
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}
